// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using User_Management.Models.Entities.EntityFramework;

#nullable disable

namespace User_Management.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.Entities.LgActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .HasColumnType("character varying")
                        .HasColumnName("activity");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<string>("Username")
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("lg_activity", (string)null);
                });

            modelBuilder.Entity("Shared.Models.Entities.MdEndpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apikey")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("apikey");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("key");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.ToTable("md_endpoints", (string)null);
                });

            modelBuilder.Entity("Shared.Service.Models.Entities.TsTaskList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("activity");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("integer")
                        .HasColumnName("reference_id");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("ts_task_list", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('lg_role_histories_id_seq'::regclass)");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("activity");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("lg_role", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRoleAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("activity");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_ref_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RoleId");

                    b.ToTable("lg_role_access", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRoleAccessRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('lg_ref_user_access_id_seq'::regclass)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<bool?>("IsCreate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_create");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<bool?>("IsEdit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_edit");

                    b.Property<bool?>("IsView")
                        .HasColumnType("boolean")
                        .HasColumnName("is_view");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("RefMenuId")
                        .HasColumnType("integer")
                        .HasColumnName("ref_menu_id");

                    b.Property<int>("RefUserAccess")
                        .HasColumnType("integer")
                        .HasColumnName("ref_user_access");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RefMenuId");

                    b.HasIndex("RefUserAccess");

                    b.ToTable("lg_role_access_ref", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("activity");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("note");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RoleId");

                    b.ToTable("lg_role_user", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRoleUserRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Departement")
                        .HasColumnType("character varying")
                        .HasColumnName("departement");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("character varying")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsApprover")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approver");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("lg_role_user_ref", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRefMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('lg_ref_menu_id_seq'::regclass)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("md_ref_menu", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('lg_roles_id_seq'::regclass)");

                    b.Property<bool?>("ApprovalStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("approval_status");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_time");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("md_role", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("md_role_access", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleAccessRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('md_ref_user_access_id_seq'::regclass)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<bool?>("IsCreate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_create");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delete");

                    b.Property<bool?>("IsEdit")
                        .HasColumnType("boolean")
                        .HasColumnName("is_edit");

                    b.Property<bool?>("IsView")
                        .HasColumnType("boolean")
                        .HasColumnName("is_view");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<int>("RefMenuId")
                        .HasColumnType("integer")
                        .HasColumnName("ref_menu_id");

                    b.Property<int>("RefUserAccess")
                        .HasColumnType("integer")
                        .HasColumnName("ref_user_access");

                    b.HasKey("Id");

                    b.HasIndex("RefMenuId");

                    b.HasIndex("RefUserAccess");

                    b.ToTable("md_role_access_ref", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("md_role_user", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleUserRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Departement")
                        .HasColumnType("character varying")
                        .HasColumnName("departement");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("character varying")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsApprover")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approver");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("md_role_user_ref", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.TmpRoleUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying")
                        .HasColumnName("id");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("character varying")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RoleId");

                    b.ToTable("tmp_role_user", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.TmpRoleUserRef", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('tmp_role_user_ref_Id_seq'::regclass)");

                    b.Property<string>("Departement")
                        .HasColumnType("character varying")
                        .HasColumnName("departement");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("character varying")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsApprover")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approver");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("parent_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("tmp_role_user_ref", (string)null);
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRole", b =>
                {
                    b.HasOne("User_Management.Models.Entities.MdRole", "Role")
                        .WithMany("LgRoleHistories")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRoleAccess", b =>
                {
                    b.HasOne("User_Management.Models.Entities.MdRoleAccess", "Parent")
                        .WithMany("LgUserAccesses")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("ref_parent_id_user_access");

                    b.HasOne("User_Management.Models.Entities.MdRole", "Role")
                        .WithMany("LgUserAccesses")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("ref_lg_user_access_md_role");

                    b.Navigation("Parent");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRoleAccessRef", b =>
                {
                    b.HasOne("User_Management.Models.Entities.MdRoleAccessRef", "Parent")
                        .WithMany("LgUserAccessRefs")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("ref_to_parent");

                    b.HasOne("User_Management.Models.Entities.MdRefMenu", "RefMenu")
                        .WithMany("LgUserAccessRefs")
                        .HasForeignKey("RefMenuId")
                        .IsRequired()
                        .HasConstraintName("ref_user_access_menu");

                    b.HasOne("User_Management.Models.Entities.MdRoleAccess", "RefUserAccessNavigation")
                        .WithMany("LgUserAccessRefs")
                        .HasForeignKey("RefUserAccess")
                        .IsRequired()
                        .HasConstraintName("ref_user_access");

                    b.Navigation("Parent");

                    b.Navigation("RefMenu");

                    b.Navigation("RefUserAccessNavigation");
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRoleUser", b =>
                {
                    b.HasOne("User_Management.Models.Entities.MdRoleUser", "Parent")
                        .WithMany("LgRoleUsers")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("ref_to_parent");

                    b.HasOne("User_Management.Models.Entities.MdRole", "Role")
                        .WithMany("LgRoleUsers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("ref_lg_role_user_md_role");

                    b.Navigation("Parent");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRoleUserRef", b =>
                {
                    b.HasOne("User_Management.Models.Entities.LgRoleUser", "Parent")
                        .WithMany("LgRoleUserRefs")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("ref_to_parent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleAccess", b =>
                {
                    b.HasOne("User_Management.Models.Entities.MdRole", "Role")
                        .WithMany("MdUserAccesses")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("ref_md_user_access_md_role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleAccessRef", b =>
                {
                    b.HasOne("User_Management.Models.Entities.MdRefMenu", "RefMenu")
                        .WithMany("MdUserAccessRefs")
                        .HasForeignKey("RefMenuId")
                        .IsRequired()
                        .HasConstraintName("ref_user_access_menu");

                    b.HasOne("User_Management.Models.Entities.MdRoleAccess", "RefUserAccessNavigation")
                        .WithMany("MdUserAccessRefs")
                        .HasForeignKey("RefUserAccess")
                        .IsRequired()
                        .HasConstraintName("ref_user_access");

                    b.Navigation("RefMenu");

                    b.Navigation("RefUserAccessNavigation");
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleUser", b =>
                {
                    b.HasOne("User_Management.Models.Entities.MdRole", "Role")
                        .WithMany("MdRoleUsers")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("ref_md_role_user_md_role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleUserRef", b =>
                {
                    b.HasOne("User_Management.Models.Entities.MdRoleUser", "Parent")
                        .WithMany("MdRoleUserRefs")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("ref_to_parent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("User_Management.Models.Entities.TmpRoleUser", b =>
                {
                    b.HasOne("User_Management.Models.Entities.MdRoleUser", "Parent")
                        .WithMany("TmpRoleUsers")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("ref_to_parent_role_user");

                    b.HasOne("User_Management.Models.Entities.MdRole", "Role")
                        .WithMany("TmpRoleUsers")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("ref_tmp_role_user_md_role");

                    b.Navigation("Parent");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("User_Management.Models.Entities.TmpRoleUserRef", b =>
                {
                    b.HasOne("User_Management.Models.Entities.TmpRoleUser", "Parent")
                        .WithMany("TmpRoleUserRefs")
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("ref_to_parent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("User_Management.Models.Entities.LgRoleUser", b =>
                {
                    b.Navigation("LgRoleUserRefs");
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRefMenu", b =>
                {
                    b.Navigation("LgUserAccessRefs");

                    b.Navigation("MdUserAccessRefs");
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRole", b =>
                {
                    b.Navigation("LgRoleHistories");

                    b.Navigation("LgRoleUsers");

                    b.Navigation("LgUserAccesses");

                    b.Navigation("MdRoleUsers");

                    b.Navigation("MdUserAccesses");

                    b.Navigation("TmpRoleUsers");
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleAccess", b =>
                {
                    b.Navigation("LgUserAccessRefs");

                    b.Navigation("LgUserAccesses");

                    b.Navigation("MdUserAccessRefs");
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleAccessRef", b =>
                {
                    b.Navigation("LgUserAccessRefs");
                });

            modelBuilder.Entity("User_Management.Models.Entities.MdRoleUser", b =>
                {
                    b.Navigation("LgRoleUsers");

                    b.Navigation("MdRoleUserRefs");

                    b.Navigation("TmpRoleUsers");
                });

            modelBuilder.Entity("User_Management.Models.Entities.TmpRoleUser", b =>
                {
                    b.Navigation("TmpRoleUserRefs");
                });
#pragma warning restore 612, 618
        }
    }
}
